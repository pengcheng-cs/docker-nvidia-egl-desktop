# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master, feature/20201210 ]
  pull_request:
    branches: [ master, feature/20201210 ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: ubuntu-novnc
  GLOBAL_IMAGE_VERSION: 202012101539

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

      # # - name: Log into GitHub Container Registry
      # #   run: echo "${{ secrets.CR_PAT }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
      # - name: Login to GitHub Container Registry
      #   uses: docker/login-action@v1.4.0
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.repository_owner }}
      #     password: ${{ secrets.CR_PAT }}

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build the Docker image
        run: docker build . --file Dockerfile.ubuntu.novnc --tag $DOCKER_IMAGE_NAME

      - name: Push Docker image to DockerHub Registry
        run: |
          IMAGE_ID=${{ secrets.DOCKERHUB_USERNAME }}/$DOCKER_IMAGE_NAME:$GLOBAL_IMAGE_VERSION
          echo IMAGE_ID=$IMAGE_ID
          docker tag $DOCKER_IMAGE_NAME $IMAGE_ID
          docker push $IMAGE_ID
